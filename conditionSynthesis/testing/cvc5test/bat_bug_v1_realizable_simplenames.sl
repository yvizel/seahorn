(synth-fun mainventry () Bool)
(synth-fun mainv_9 ((x0 Int)) Bool)
(synth-fun mainv_12 ((x0 Int)) Bool)
(synth-fun mainvverifier.error ((x0 Int) ) Bool)
(synth-fun mainvverifier.error.split () Bool)
(synth-fun mainv_9!_FwdCond ((x0 Int)) Bool)
(declare-var y_0 Int )
(declare-var x_0 Int )
(declare-var guard_0 Bool )
(declare-var sum_0 Int )
(declare-var z_0 Int )
(declare-var z_1 Int )
(declare-var z_2 Int )
(declare-var z_3 Int )
(constraint mainventry)
(constraint (=> (and mainventry
                (= sum_0 (+ x_0 y_0))
                (= guard_0 (> sum_0 8))
                (= z_0 sum_0)
                (= z_1 9)
                (=> guard_0 (= z_2 z_0))
                (=> (not guard_0) (= z_2 z_1)))
  (mainv_9 z_2 )))
(constraint (=> (and (mainv_12 z_2)
         (= z_3 (+ z_2 (- 1))))
    (mainvverifier.error z_3)))
(constraint (=> (and (mainvverifier.error z_3)
         (not (> z_3 8)))
    mainvverifier.error.split))
(constraint (=> (and (mainv_9!_FwdCond z_2)
         (mainv_9 z_2))
    (mainv_12 z_2)))
(constraint (=> (and (not (mainv_9!_FwdCond z_2))
         (mainv_9 z_2)
         (= z_3 z_2))
    (mainvverifier.error z_3)))
(constraint (=> mainvverifier.error.split false))
(check-synth)
