(set-logic LIA)
(synth-fun mainventry!_FwdCond ((x0 Int) (x1 Int) ) Bool)
(declare-var mainv%_0_0 Int )
(declare-var cond_answer Bool )
(declare-var vnd_0 Int )
(declare-var mainv%_1_0 Int )
(declare-var mainv%_2_0 Int )
(declare-var vfind_condition_0 Int )
(declare-var mainv%_4_0 Int )
(declare-var mainv%_5_0 Int )
(declare-var mainv%.0.p.i_0 Int )
(declare-var mainv%.0.i_0 Int )
(declare-var mainv%_6_0 Bool )
(declare-var mainventry_0 Bool )
(declare-var mainventry.split_0 Bool )
(constraint (and
         (= cond_answer (mainventry!_FwdCond vnd_0 vfind_condition_0))
         (= mainv%_1_0 vnd_0)
         (= mainv%_2_0 vfind_condition_0)
         (= mainv%_4_0 (* mainv%_1_0 2))
         (= mainv%_5_0 (- 0 mainv%_1_0))
         (=> cond_answer (= mainv%.0.p.i_0 mainv%_4_0))
         (=> (not cond_answer) (= mainv%.0.p.i_0 mainv%_5_0))
         (= mainv%.0.i_0 (+ mainv%.0.p.i_0 2))
         (= mainv%_6_0 (> mainv%.0.i_0 0))
         (mainv%_6_0))
)
(check-synth)
