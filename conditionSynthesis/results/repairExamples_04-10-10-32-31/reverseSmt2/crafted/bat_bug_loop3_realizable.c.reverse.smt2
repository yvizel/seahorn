(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int ))
(declare-rel main@_10 (Int Int Int Int ))
(declare-rel main@verifier.error.split ())
(declare-rel main@entry!_BAD ())
(declare-var main@%_11_0 Int )
(declare-var @find_condition_0 Int )
(declare-var main@%_12_0 Bool )
(declare-var main@%_14_0 Bool )
(declare-var main@%.01.i_2 Int )
(declare-var main@%.1.i_2 Int )
(declare-var main@%_0_0 Bool )
(declare-var main@%_1_0 Int )
(declare-var @nd_0 Int )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Int )
(declare-var main@%_5_0 Int )
(declare-var main@%_8_0 Bool )
(declare-var main@%.1.i.ph_2 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%loop.bound_0 Int )
(declare-var main@%_2_0 Int )
(declare-var main@%_7_0 Int )
(declare-var main@_9_0 Bool )
(declare-var main@.preheader_0 Bool )
(declare-var |tuple(main@entry_0, main@.preheader_0)| Bool )
(declare-var main@%.1.i.ph_0 Int )
(declare-var main@%.1.i.ph_1 Int )
(declare-var main@_10_0 Bool )
(declare-var main@%.01.i_0 Int )
(declare-var main@%.1.i_0 Int )
(declare-var main@%.01.i_1 Int )
(declare-var main@%.1.i_1 Int )
(declare-var main@%_13_0 Int )
(declare-var main@%_15_0 Int )
(declare-var main@_10_1 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (=> (main@entry @find_condition_0 @nd_0) main@entry!_BAD))
(rule (let ((a!1 (and (main@_10 @find_condition_0
                          main@%.1.i_1
                          main@%.01.i_1
                          main@%loop.bound_0)
                true
                true
                (= main@%_0_0 (= main@%loop.bound_0 9))
                main@%_0_0
                (= main@%_1_0 @nd_0)
                (= main@%_3_0 @nd_0)
                (= main@%_5_0 @nd_0)
                (= main@%_7_0 (+ main@%_4_0 main@%_2_0))
                (= main@%_8_0 (> main@%_7_0 8))
                (=> main@_9_0 (and main@_9_0 main@entry_0))
                (=> (and main@_9_0 main@entry_0) main@%_8_0)
                (=> |tuple(main@entry_0, main@.preheader_0)| main@entry_0)
                (=> main@.preheader_0
                    (or (and main@.preheader_0 main@_9_0)
                        |tuple(main@entry_0, main@.preheader_0)|))
                (=> |tuple(main@entry_0, main@.preheader_0)| (not main@%_8_0))
                (=> (and main@.preheader_0 main@_9_0)
                    (= main@%.1.i.ph_0 main@%_7_0))
                (=> |tuple(main@entry_0, main@.preheader_0)|
                    (= main@%.1.i.ph_1 9))
                (=> (and main@.preheader_0 main@_9_0)
                    (= main@%.1.i.ph_2 main@%.1.i.ph_0))
                (=> |tuple(main@entry_0, main@.preheader_0)|
                    (= main@%.1.i.ph_2 main@%.1.i.ph_1))
                (=> main@_10_0 (and main@_10_0 main@.preheader_0))
                (=> (and main@_10_0 main@.preheader_0)
                    (= main@%.01.i_0 main@%_2_0))
                (=> (and main@_10_0 main@.preheader_0)
                    (= main@%.1.i_0 main@%.1.i.ph_2))
                (=> (and main@_10_0 main@.preheader_0)
                    (= main@%.01.i_1 main@%.01.i_0))
                (=> (and main@_10_0 main@.preheader_0)
                    (= main@%.1.i_1 main@%.1.i_0))
                main@_10_0)))
  (=> a!1 (main@entry @find_condition_0 @nd_0))))
(rule (=> (and (main@_10 @find_condition_0
                   main@%.1.i_2
                   main@%.01.i_2
                   main@%loop.bound_0)
         true
         true
         (= main@%_11_0 @find_condition_0)
         main@%_12_0
         (= main@%_13_0 (+ main@%.1.i_0 main@%.01.i_0))
         (= main@%_14_0 (> main@%_13_0 main@%loop.bound_0))
         (= main@%_15_0 (+ main@%.01.i_0 (- 3)))
         (=> main@_10_1 (and main@_10_1 main@_10_0))
         (=> (and main@_10_1 main@_10_0) main@%_14_0)
         (=> (and main@_10_1 main@_10_0) (= main@%.01.i_1 main@%_15_0))
         (=> (and main@_10_1 main@_10_0) (= main@%.1.i_1 main@%_13_0))
         (=> (and main@_10_1 main@_10_0) (= main@%.01.i_2 main@%.01.i_1))
         (=> (and main@_10_1 main@_10_0) (= main@%.1.i_2 main@%.1.i_1))
         main@_10_1)
    (main@_10 @find_condition_0 main@%.1.i_0 main@%.01.i_0 main@%loop.bound_0)))
(rule (=> (and main@verifier.error.split
         true
         true
         (= main@%_11_0 @find_condition_0)
         main@%_12_0
         (= main@%_13_0 (+ main@%.1.i_0 main@%.01.i_0))
         (= main@%_14_0 (> main@%_13_0 main@%loop.bound_0))
         (= main@%_15_0 (+ main@%.01.i_0 (- 3)))
         (=> main@verifier.error_0 (and main@verifier.error_0 main@_10_0))
         (=> (and main@verifier.error_0 main@_10_0) (not main@%_14_0))
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    (main@_10 @find_condition_0 main@%.1.i_0 main@%.01.i_0 main@%loop.bound_0)))
(rule main@verifier.error.split)
(query main@entry!_BAD)

