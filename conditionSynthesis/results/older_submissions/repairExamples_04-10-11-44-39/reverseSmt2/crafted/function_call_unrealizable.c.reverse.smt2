(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int Int ))
(declare-rel main@verifier.error.split ())
(declare-rel main@entry!_BAD ())
(declare-var main@%not._0 Bool )
(declare-var main@%_0_0 Int )
(declare-var @nd_0 Int )
(declare-var main@%_1_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var @g_0 Int )
(declare-var main@%_4_0 Int )
(declare-var @find_condition_0 Int )
(declare-var main@%_6_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%_5_0 Bool )
(declare-var main@_8_0 Bool )
(declare-var main@_7_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (=> (main@entry @nd_0 @g_0 @find_condition_0) main@entry!_BAD))
(rule (let ((a!1 (and main@verifier.error.split
                true
                true
                (= main@%_0_0 @nd_0)
                (= main@%_2_0 (> main@%_1_0 0))
                (= main@%_3_0 @g_0)
                (= main@%_4_0 @find_condition_0)
                (= main@%_6_0 @g_0)
                (=> main@_8_0 (and main@_8_0 main@entry_0))
                (=> (and main@_8_0 main@entry_0) (not main@%_2_0))
                (=> main@_8_0 (= main@%not._0 (xor main@%_5_0 true)))
                (=> main@_8_0 (not main@%not._0))
                (=> main@_7_0 (and main@_7_0 main@entry_0))
                (=> (and main@_7_0 main@entry_0) main@%_2_0)
                (=> main@_7_0 (not main@%_5_0))
                (=> main@verifier.error_0
                    (or (and main@verifier.error_0 main@_8_0)
                        (and main@verifier.error_0 main@_7_0)))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 (main@entry @nd_0 @g_0 @find_condition_0))))
(rule main@verifier.error.split)
(query main@entry!_BAD)

