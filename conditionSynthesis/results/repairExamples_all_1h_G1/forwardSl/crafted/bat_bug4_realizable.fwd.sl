(synth-fun verifier.error ((x0 Bool) (x1 Bool) (x2 Bool) ) Bool
)
(synth-fun mainventry ((x0 Int) (x1 Int) (x2 Int) ) Bool
)
(synth-fun mainv_9 ((x0 Int) (x1 Int) (x2 Int) ) Bool
)
(synth-fun mainv_12 ((x0 Int) (x1 Int) ) Bool
)
(synth-fun mainvverifier.error ((x0 Int) ) Bool
)
(synth-fun mainvverifier.error.split () Bool
)
(synth-fun mainventry!_BAD () Bool
)
(synth-fun mainv_9!_Cond ((x0 Int) (x1 Int) (x2 Int) ) Bool
    ((Start Bool) (Atom Bool) (Expr Int) (Arr (Array Int Int)))
    ((Start Bool (Atom (Variable Bool) (Constant Bool) ))
    (Atom Bool ((>= Expr Expr) (<= Expr Expr) (> Expr Expr) (< Expr Expr) (= Expr Expr) (distinct Expr Expr) ))
    (Expr Int ((Variable Int) (Constant Int) (select Arr Expr) ))
    (Arr (Array Int Int) ((Variable (Array Int Int)) (Constant (Array Int Int)) )))
)
(declare-var mainv%_15_0 Bool )
(declare-var mainv%_13_0 Int )
(declare-var vg_0 Int )
(declare-var mainv%_10_0 Int )
(declare-var vfind_condition_0 Int )
(declare-var mainv%_11_0 Bool )
(declare-var mainv%_0_0 Int )
(declare-var vnd_0 Int )
(declare-var mainv%_1_0 Int )
(declare-var mainv%_2_0 Int )
(declare-var mainv%_3_0 Int )
(declare-var mainv%_4_0 Int )
(declare-var mainv%_7_0 Bool )
(declare-var mainventry_0 Bool )
(declare-var mainv%_6_0 Int )
(declare-var mainv_8_0 Bool )
(declare-var mainv_9_0 Bool )
(declare-var |tuple(mainventry_0, mainv_9_0)| Bool )
(declare-var mainv%.0.i_0 Int )
(declare-var mainv%.0.i_1 Int )
(declare-var mainv%.0.i_2 Int )
(declare-var mainv_12_0 Bool )
(declare-var mainvverifier.error_0 Bool )
(declare-var mainv%.1.i_0 Int )
(declare-var mainv%.1.i_1 Int )
(declare-var mainv%_14_0 Int )
(declare-var mainvverifier.error.split_0 Bool )
(constraint (verifier.error false false false))
(constraint (verifier.error false true true))
(constraint (verifier.error true false true))
(constraint (verifier.error true true true))
(constraint (mainventry vg_0 vfind_condition_0 vnd_0))
(constraint (let ((a!1 (and (mainventry vg_0 vfind_condition_0 vnd_0)
                true
                (= mainv%_0_0 vnd_0)
                (= mainv%_2_0 vnd_0)
                (= mainv%_4_0 vnd_0)
                (= mainv%_6_0 (+ mainv%_3_0 mainv%_1_0))
                (= mainv%_7_0 (> mainv%_6_0 7))
                (=> mainv_8_0 (and mainv_8_0 mainventry_0))
                (=> (and mainv_8_0 mainventry_0) mainv%_7_0)
                (=> |tuple(mainventry_0, mainv_9_0)| mainventry_0)
                (=> mainv_9_0
                    (or (and mainv_9_0 mainv_8_0)
                        |tuple(mainventry_0, mainv_9_0)|))
                (=> |tuple(mainventry_0, mainv_9_0)| (not mainv%_7_0))
                (=> (and mainv_9_0 mainv_8_0) (= mainv%.0.i_0 mainv%_6_0))
                (=> |tuple(mainventry_0, mainv_9_0)| (= mainv%.0.i_1 10))
                (=> (and mainv_9_0 mainv_8_0) (= mainv%.0.i_2 mainv%.0.i_0))
                (=> |tuple(mainventry_0, mainv_9_0)|
                    (= mainv%.0.i_2 mainv%.0.i_1))
                mainv_9_0)))
  (=> a!1 (mainv_9 vg_0 mainv%.0.i_2 vfind_condition_0))))
(constraint (=> (and (mainv_12 vg_0 mainv%.0.i_0)
         true
         (= mainv%_13_0 vg_0)
         (= mainv%_14_0 (+ mainv%.0.i_0 1))
         (=> mainvverifier.error_0 (and mainvverifier.error_0 mainv_12_0))
         (=> (and mainvverifier.error_0 mainv_12_0)
             (= mainv%.1.i_0 mainv%_14_0))
         (=> (and mainvverifier.error_0 mainv_12_0)
             (= mainv%.1.i_1 mainv%.1.i_0))
         mainvverifier.error_0)
    (mainvverifier.error mainv%.1.i_1)))
(constraint (=> (and (mainvverifier.error mainv%.1.i_0)
         true
         (= mainv%_15_0 (> mainv%.1.i_0 8))
         (not mainv%_15_0)
         (=> mainvverifier.error.split_0
             (and mainvverifier.error.split_0 mainvverifier.error_0))
         mainvverifier.error.split_0)
    mainvverifier.error.split))
(constraint (=> (and (mainv_9!_Cond vg_0 mainv%.0.i_0 mainv%.1.i_1)
         (mainv_9 vg_0 mainv%.0.i_0 vfind_condition_0)
         true
         (= mainv%_10_0 vfind_condition_0)
         (=> mainv_12_0 (and mainv_12_0 mainv_9_0))
         (=> (and mainv_12_0 mainv_9_0) mainv%_11_0)
         mainv_12_0)
    (mainv_12 vg_0 mainv%.0.i_0)))
(constraint (=> (and (not (mainv_9!_Cond vg_0 mainv%.0.i_0 mainv%.1.i_1))
         (mainv_9 vg_0 mainv%.0.i_0 vfind_condition_0)
         true
         (= mainv%_10_0 vfind_condition_0)
         (=> mainvverifier.error_0 (and mainvverifier.error_0 mainv_9_0))
         (=> (and mainvverifier.error_0 mainv_9_0) (not mainv%_11_0))
         (=> (and mainvverifier.error_0 mainv_9_0)
             (= mainv%.1.i_0 mainv%.0.i_0))
         (=> (and mainvverifier.error_0 mainv_9_0)
             (= mainv%.1.i_1 mainv%.1.i_0))
         mainvverifier.error_0)
    (mainvverifier.error mainv%.1.i_1)))
(constraint (=> mainvverifier.error.split false))
(check-synth)
