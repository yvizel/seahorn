void g1()
{
}

void g()
{
}

harness int main()
{
  int x = getND();
  if (x > 0)
  {
    g();
    x = -5;
    int z = f(x);
    assert(z == 0);
  }
  else
  {
    g1();
    int z = f(x);
    assert(z == 0);
  }

  return 0;
}

int f(int x)
{
  int y = 0;
  if (main_generator_for_bit_26(1, x, y))
  {
    g1();
    return y;
  }

  return 3;
}


generator int base_generator_for_int_26(int x, int y) {
    return {| x | y |};
}
generator int main_generator_for_int_26(int bnd, int sk_x, int sk_y) {
    assert bnd > 0;
    int t = ??(3);
    int x = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_26(sk_x, sk_y)  | main_generator_for_int_26(bnd - 1, sk_x, sk_y) |};
    if(t == 0){return x;}
    int y = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_26(sk_x, sk_y)  | main_generator_for_int_26(bnd - 1, sk_x, sk_y) |};
    if(t == 1){return x+y;}
    if(t == 2){return x-y;}
    if(t == 3){return x*y;}
    if(t == 4){return x/y;}
}
generator bit main_generator_for_bit_26(int bnd, int sk_x, int sk_y) {
    assert bnd > 0;
    int t = ??(6);
    if(t==0) {
        int y = main_generator_for_int_26(bnd, sk_x, sk_y);
        int z = main_generator_for_int_26(bnd, sk_x, sk_y);
        int t2 = ??(2);
        if(t2 == 0) {return y < z;}
        if(t2 == 1) {return y == z;}
        if(t2 == 2) {return y <= z;}
    }
    bit x = {| ??(1)  | main_generator_for_bit_26(bnd - 1, sk_x, sk_y) |};
    if(t == 3){return x;}
    if(t == 4){return !x;}
    bit y = {| ??(1)  | main_generator_for_bit_26(bnd - 1, sk_x, sk_y) |};
    if(t == 5){return x&&y;}
    if(t == 6){return x||y;}
}
int NDCNT=0;
int getND_private(int i);
int getND(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
int nd(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
