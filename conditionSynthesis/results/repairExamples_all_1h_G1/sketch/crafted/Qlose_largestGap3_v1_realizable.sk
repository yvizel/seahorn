void g()
{
}

int largestGap(int n, int[n] a)
{
  int max = 0;
  int min = 100;
  for (int i = 0; i < n; i++)
  {
    if (main_generator_for_bit_11(1, n, max, min, i))
    {
      g();
      max = a[i];
    }

    if (min > a[i])
      min = a[i];

  }

  return max - min;
}

int AllRepair_correct_largestGap(int n, int[n] a)
{
  int max = a[0];
  int min = a[0];
  for (int i = 1; i < n; i++)
  {
    if (max < a[i])
      max = a[i];

    if (min > a[i])
      min = a[i];

  }

  return max - min;
}

harness int main()
{
  int[7] a;
  for (int i = 0; i < 7; i++)
  {
    a[i] = getND();
  }

  int res1 = largestGap(7, a);
  int res2 = AllRepair_correct_largestGap(7, a);
  assert(res1 == res2);
  return 0;
}


generator int base_generator_for_int_11(int n, int max, int min, int i) {
    return {| n | max | min | i |};
}
generator int main_generator_for_int_11(int bnd, int sk_n, int sk_max, int sk_min, int sk_i) {
    assert bnd > 0;
    int t = ??(3);
    int x = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_11(sk_n, sk_max, sk_min, sk_i)  | main_generator_for_int_11(bnd - 1, sk_n, sk_max, sk_min, sk_i) |};
    if(t == 0){return x;}
    int y = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_11(sk_n, sk_max, sk_min, sk_i)  | main_generator_for_int_11(bnd - 1, sk_n, sk_max, sk_min, sk_i) |};
    if(t == 1){return x+y;}
    if(t == 2){return x-y;}
    if(t == 3){return x*y;}
    if(t == 4){return x/y;}
}
generator bit main_generator_for_bit_11(int bnd, int sk_n, int sk_max, int sk_min, int sk_i) {
    assert bnd > 0;
    int t = ??(6);
    if(t==0) {
        int y = main_generator_for_int_11(bnd, sk_n, sk_max, sk_min, sk_i);
        int z = main_generator_for_int_11(bnd, sk_n, sk_max, sk_min, sk_i);
        int t2 = ??(2);
        if(t2 == 0) {return y < z;}
        if(t2 == 1) {return y == z;}
        if(t2 == 2) {return y <= z;}
    }
    bit x = {| ??(1)  | main_generator_for_bit_11(bnd - 1, sk_n, sk_max, sk_min, sk_i) |};
    if(t == 3){return x;}
    if(t == 4){return !x;}
    bit y = {| ??(1)  | main_generator_for_bit_11(bnd - 1, sk_n, sk_max, sk_min, sk_i) |};
    if(t == 5){return x&&y;}
    if(t == 6){return x||y;}
}
int NDCNT=0;
int getND_private(int i);
int getND(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
int nd(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
