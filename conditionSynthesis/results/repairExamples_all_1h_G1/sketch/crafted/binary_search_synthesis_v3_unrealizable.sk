void g()
{
}

harness int main()
{
  int[5] a;
  for (int i = 0; i < 4; i++)
  {
    a[i] = getND();
  }

  int x = getND();
  for (int i = 0; i < 4; i++)
  {
    assume(a[i] <= a[i + 1]);
  }

  bit res_binary = binary_search(5, a, x);
  bit res_naive = naive_search(5, a, x);
  assert(res_naive == res_binary);
  return 0;
}

bit binary_search(int n, int[n] a, int x)
{
  int left = 0;
  int right = n - 1;
  while (right >= left)
  {
    int mid = (right + left) / 2;
    if (main_generator_for_bit_31(1, n, x, left, right, mid))
    {
      return 0;
    }
    else
      if (a[mid] > x)
    {
      right = mid - 1;
    }
    else
    {
      left = mid + 1;
    }


  }

  return 0;
}

bit naive_search(int n, int[n] a, int x)
{
  for (int i = 0; i < n; i++)
  {
    if (a[i] == x)
    {
      return 1;
    }

  }

  return 0;
}


generator int base_generator_for_int_31(int n, int x, int left, int right, int mid) {
    return {| n | x | left | right | mid |};
}
generator int main_generator_for_int_31(int bnd, int sk_n, int sk_x, int sk_left, int sk_right, int sk_mid) {
    assert bnd > 0;
    int t = ??(3);
    int x = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_31(sk_n, sk_x, sk_left, sk_right, sk_mid)  | main_generator_for_int_31(bnd - 1, sk_n, sk_x, sk_left, sk_right, sk_mid) |};
    if(t == 0){return x;}
    int y = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_31(sk_n, sk_x, sk_left, sk_right, sk_mid)  | main_generator_for_int_31(bnd - 1, sk_n, sk_x, sk_left, sk_right, sk_mid) |};
    if(t == 1){return x+y;}
    if(t == 2){return x-y;}
    if(t == 3){return x*y;}
    if(t == 4){return x/y;}
}
generator bit main_generator_for_bit_31(int bnd, int sk_n, int sk_x, int sk_left, int sk_right, int sk_mid) {
    assert bnd > 0;
    int t = ??(6);
    if(t==0) {
        int y = main_generator_for_int_31(bnd, sk_n, sk_x, sk_left, sk_right, sk_mid);
        int z = main_generator_for_int_31(bnd, sk_n, sk_x, sk_left, sk_right, sk_mid);
        int t2 = ??(2);
        if(t2 == 0) {return y < z;}
        if(t2 == 1) {return y == z;}
        if(t2 == 2) {return y <= z;}
    }
    bit x = {| ??(1)  | main_generator_for_bit_31(bnd - 1, sk_n, sk_x, sk_left, sk_right, sk_mid) |};
    if(t == 3){return x;}
    if(t == 4){return !x;}
    bit y = {| ??(1)  | main_generator_for_bit_31(bnd - 1, sk_n, sk_x, sk_left, sk_right, sk_mid) |};
    if(t == 5){return x&&y;}
    if(t == 6){return x||y;}
}
int NDCNT=0;
int getND_private(int i);
int getND(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
int nd(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
