(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int Int ))
(declare-rel main@_8 (Int Int Int ))
(declare-rel main@verifier.error (Int ))
(declare-rel main@verifier.error.split ())
(declare-rel main@entry!_BAD ())
(declare-rel main@entry!_Cond (Int Int Int Int ))
(declare-var main@%_14_0 Bool )
(declare-var main@%_12_0 Int )
(declare-var @g_0 Int )
(declare-var main@%_10_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var @nd_0 Int )
(declare-var main@%_2_0 Int )
(declare-var main@%_4_0 Int )
(declare-var main@%_6_0 Int )
(declare-var @find_condition_0 Int )
(declare-var main@%_7_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_1_0 Int )
(declare-var main@%_3_0 Int )
(declare-var main@_8_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@%.1.i_0 Int )
(declare-var main@%.1.i_1 Int )
(declare-var main@%_9_0 Int )
(declare-var main@_11_0 Bool )
(declare-var main@%_13_0 Int )
(declare-var |tuple(main@_8_0, main@verifier.error_0)| Bool )
(declare-var main@%.1.i_2 Int )
(declare-var main@verifier.error.split_0 Bool )
(rule (=> (main@entry @g_0 @nd_0 @find_condition_0) main@entry!_BAD))
(rule (let ((a!1 (and (main@verifier.error main@%.1.i_2)
                true
                true
                (= main@%_9_0 (+ main@%_3_0 main@%_1_0))
                (= main@%_10_0 (> main@%_9_0 9))
                (=> main@_11_0 (and main@_11_0 main@_8_0))
                (=> (and main@_11_0 main@_8_0) main@%_10_0)
                (=> main@_11_0 (= main@%_12_0 @g_0))
                (=> main@_11_0 (= main@%_13_0 (+ main@%_9_0 (- 1))))
                (=> |tuple(main@_8_0, main@verifier.error_0)| main@_8_0)
                (=> main@verifier.error_0
                    (or (and main@verifier.error_0 main@_11_0)
                        |tuple(main@_8_0, main@verifier.error_0)|))
                (=> |tuple(main@_8_0, main@verifier.error_0)| (not main@%_10_0))
                (=> (and main@verifier.error_0 main@_11_0)
                    (= main@%.1.i_0 main@%_13_0))
                (=> |tuple(main@_8_0, main@verifier.error_0)|
                    (= main@%.1.i_1 main@%_9_0))
                (=> (and main@verifier.error_0 main@_11_0)
                    (= main@%.1.i_2 main@%.1.i_0))
                (=> |tuple(main@_8_0, main@verifier.error_0)|
                    (= main@%.1.i_2 main@%.1.i_1))
                main@verifier.error_0)))
  (=> a!1 (main@_8 @g_0 main@%_3_0 main@%_1_0))))
(rule (=> (and main@verifier.error.split
         true
         true
         (= main@%_14_0 (> main@%.1.i_0 8))
         (not main@%_14_0)
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    (main@verifier.error main@%.1.i_0)))
(rule main@verifier.error.split)
(rule (=> (and (main@entry!_Cond @g_0 main@%_1_0 main@%_3_0 main@%.1.i_1)
         true
         (= main@%_0_0 @nd_0)
         (= main@%_2_0 @nd_0)
         (= main@%_4_0 @nd_0)
         (= main@%_6_0 @find_condition_0)
         (=> main@_8_0 (and main@_8_0 main@entry_0))
         true
         main@_8_0
         true
         (= main@%_0_0 @nd_0)
         (= main@%_2_0 @nd_0)
         (= main@%_4_0 @nd_0)
         (= main@%_6_0 @find_condition_0)
         (=> main@verifier.error_0 (and main@verifier.error_0 main@entry_0))
         true
         (=> (and main@verifier.error_0 main@entry_0) (= main@%.1.i_0 9))
         (=> (and main@verifier.error_0 main@entry_0)
             (= main@%.1.i_1 main@%.1.i_0))
         main@verifier.error_0)
    (main@entry @g_0 @nd_0 @find_condition_0)))
(rule (=> (and (main@_8 @g_0 main@%_3_0 main@%_1_0)
         (main@verifier.error main@%.1.i_1))
    (main@entry!_Cond @g_0 main@%_1_0 main@%_3_0 main@%.1.i_1)))
(query main@entry!_BAD)

