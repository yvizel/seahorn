void g()
{
}

int Cur_Vertical_Sep;
int High_Confidence;
int Two_of_Three_Reports_Valid;
int Own_Tracked_Alt;
int Own_Tracked_Alt_Rate;
int Other_Tracked_Alt;
int Alt_Layer_Value;
int[4] Positive_RA_Alt_Thresh;
int Up_Separation;
int Down_Separation;
int Other_RAC;
int Other_Capability;
int Climb_Inhibit;
void initialize()
{
  Positive_RA_Alt_Thresh[0] = 400;
  Positive_RA_Alt_Thresh[1] = 550;
  Positive_RA_Alt_Thresh[2] = 640;
  Positive_RA_Alt_Thresh[3] = 740;
}

int ALIM()
{
  return Positive_RA_Alt_Thresh[Alt_Layer_Value];
}

int Inhibit_Biased_Climb()
{
  if (main_generator_for_bit_93(1))
  {
    g();
    return Up_Separation + 100;
  }
  else
  {
    return Up_Separation;
  }

}

bit Non_Crossing_Biased_Climb()
{
  int upward_preferred;
  int upward_crossing_situation;
  bit result;
  upward_preferred = Inhibit_Biased_Climb() > Down_Separation;
  if ((upward_preferred != 0))
  {
    result = (!Own_Below_Threat()) || (Own_Below_Threat() && (!(Down_Separation >= ALIM())));
  }
  else
  {
    result = (Own_Above_Threat() && (Cur_Vertical_Sep >= 300)) && (Up_Separation >= ALIM());
  }

  return result;
}

bit Non_Crossing_Biased_Descend()
{
  int upward_preferred;
  int upward_crossing_situation;
  bit result;
  upward_preferred = Inhibit_Biased_Climb() > Down_Separation;
  if ((upward_preferred != 0))
  {
    result = (Own_Below_Threat() && (Cur_Vertical_Sep >= 300)) && (Down_Separation >= ALIM());
  }
  else
  {
    result = (!Own_Above_Threat()) || (Own_Above_Threat() && (Up_Separation >= ALIM()));
  }

  return result;
}

bit Own_Below_Threat()
{
  return Own_Tracked_Alt < Other_Tracked_Alt;
}

bit Own_Above_Threat()
{
  return Other_Tracked_Alt < Own_Tracked_Alt;
}

int alt_sep_test()
{
  bit enabled;
  bit tcas_equipped;
  bit intent_not_known;
  bit need_upward_RA;
  bit need_downward_RA;
  int alt_sep;
  enabled = ((High_Confidence != 0) && (Own_Tracked_Alt_Rate <= 600)) && (Cur_Vertical_Sep > 600);
  tcas_equipped = Other_Capability == 1;
  intent_not_known = (Two_of_Three_Reports_Valid != 0) && (Other_RAC == 0);
  alt_sep = 0;
  if (enabled && ((tcas_equipped && intent_not_known) || (!tcas_equipped)))
  {
    need_upward_RA = Non_Crossing_Biased_Climb() && Own_Below_Threat();
    need_downward_RA = Non_Crossing_Biased_Descend() && Own_Above_Threat();
    if (need_upward_RA && need_downward_RA)
      alt_sep = 0;
    else
      if (need_upward_RA)
      alt_sep = 1;
    else
      if (need_downward_RA)
      alt_sep = 2;
    else
      alt_sep = 0;



  }

  return alt_sep;
}

void AllRepair_correct_initialize()
{
  Positive_RA_Alt_Thresh[0] = 400;
  Positive_RA_Alt_Thresh[1] = 500;
  Positive_RA_Alt_Thresh[2] = 640;
  Positive_RA_Alt_Thresh[3] = 740;
}

int AllRepair_correct_ALIM()
{
  return Positive_RA_Alt_Thresh[Alt_Layer_Value];
}

int AllRepair_correct_Inhibit_Biased_Climb()
{
  return ((Climb_Inhibit != 0)) ? (Up_Separation + 100) : (Up_Separation);
}

bit AllRepair_correct_Non_Crossing_Biased_Climb()
{
  int upward_preferred;
  int upward_crossing_situation;
  bit result;
  if (AllRepair_correct_Inhibit_Biased_Climb() > Down_Separation)
  {
    result = (!AllRepair_correct_Own_Below_Threat()) || (AllRepair_correct_Own_Below_Threat() && (!(Down_Separation >= AllRepair_correct_ALIM())));
  }
  else
  {
    result = (AllRepair_correct_Own_Above_Threat() && (Cur_Vertical_Sep >= 300)) && (Up_Separation >= AllRepair_correct_ALIM());
  }

  return result;
}

bit AllRepair_correct_Non_Crossing_Biased_Descend()
{
  int upward_preferred;
  int upward_crossing_situation;
  bit result;
  if (AllRepair_correct_Inhibit_Biased_Climb() > Down_Separation)
  {
    result = (AllRepair_correct_Own_Below_Threat() && (Cur_Vertical_Sep >= 300)) && (Down_Separation >= AllRepair_correct_ALIM());
  }
  else
  {
    result = (!AllRepair_correct_Own_Above_Threat()) || (AllRepair_correct_Own_Above_Threat() && (Up_Separation >= AllRepair_correct_ALIM()));
  }

  return result;
}

bit AllRepair_correct_Own_Below_Threat()
{
  return (Own_Tracked_Alt < Other_Tracked_Alt) && 1;
}

bit AllRepair_correct_Own_Above_Threat()
{
  return (Other_Tracked_Alt < Own_Tracked_Alt) && 1;
}

int AllRepair_correct_alt_sep_test()
{
  bit enabled;
  bit tcas_equipped;
  bit intent_not_known;
  bit need_upward_RA;
  bit need_downward_RA;
  int alt_sep;
  enabled = ((High_Confidence != 0) && (Own_Tracked_Alt_Rate <= 600)) && (Cur_Vertical_Sep > 600);
  tcas_equipped = (Other_Capability == 1) && 1;
  intent_not_known = (Two_of_Three_Reports_Valid != 0) && (Other_RAC == 0);
  alt_sep = 0;
  if (enabled && ((tcas_equipped && intent_not_known) || (!tcas_equipped)))
  {
    need_upward_RA = AllRepair_correct_Non_Crossing_Biased_Climb() && AllRepair_correct_Own_Below_Threat();
    need_downward_RA = AllRepair_correct_Non_Crossing_Biased_Descend() && AllRepair_correct_Own_Above_Threat();
    if (need_upward_RA && need_downward_RA)
      alt_sep = 0;
    else
      if (need_upward_RA)
      alt_sep = 1;
    else
      if (need_downward_RA)
      alt_sep = 2;
    else
      alt_sep = 0;



  }

  return alt_sep;
}

harness int main()
{
  Cur_Vertical_Sep = getND();
  High_Confidence = getND();
  assume((High_Confidence >= 0) && (High_Confidence <= 1));
  Two_of_Three_Reports_Valid = getND();
  assume((Two_of_Three_Reports_Valid >= 0) && (Two_of_Three_Reports_Valid <= 1));
  Own_Tracked_Alt = getND();
  Own_Tracked_Alt_Rate = getND();
  Other_Tracked_Alt = getND();
  Alt_Layer_Value = getND();
  assume((Alt_Layer_Value >= 0) && (Alt_Layer_Value <= 3));
  Up_Separation = getND();
  Down_Separation = getND();
  Other_RAC = getND();
  assume((Other_RAC >= 0) && (Other_RAC <= 1));
  Other_Capability = getND();
  assume((Other_Capability >= 0) && (Other_Capability <= 1));
  Climb_Inhibit = getND();
  assume((Climb_Inhibit >= 0) && (Climb_Inhibit <= 1));
  assume((((((Own_Tracked_Alt <= 100000) && (Other_Tracked_Alt <= 100000)) && (Up_Separation <= 100000)) && (Down_Separation <= 100000)) && (Cur_Vertical_Sep <= 100000)) && (Own_Tracked_Alt_Rate <= 100000));
  initialize();
  int res = alt_sep_test();
  AllRepair_correct_initialize();
  int res_correct = AllRepair_correct_alt_sep_test();
  assert(res == res_correct);
  return 0;
}


generator int base_generator_for_int_93() {
    return {| Cur_Vertical_Sep | High_Confidence | Two_of_Three_Reports_Valid | Own_Tracked_Alt | Own_Tracked_Alt_Rate | Other_Tracked_Alt | Alt_Layer_Value | Up_Separation | Down_Separation | Other_RAC | Other_Capability | Climb_Inhibit |};
}
generator int main_generator_for_int_93(int bnd) {
    assert bnd > 0;
    int t = ??(3);
    int x = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_93()  | main_generator_for_int_93(bnd - 1) |};
    if(t == 0){return x;}
    int y = {| 50 | 100 | 300 | 600 | ?? | base_generator_for_int_93()  | main_generator_for_int_93(bnd - 1) |};
    if(t == 1){return x+y;}
    if(t == 2){return x-y;}
    if(t == 3){return x*y;}
    if(t == 4){return x/y;}
}
generator bit main_generator_for_bit_93(int bnd) {
    assert bnd > 0;
    int t = ??(6);
    if(t==0) {
        int y = main_generator_for_int_93(bnd);
        int z = main_generator_for_int_93(bnd);
        int t2 = ??(2);
        if(t2 == 0) {return y < z;}
        if(t2 == 1) {return y == z;}
        if(t2 == 2) {return y <= z;}
    }
    bit x = {| ??(1)  | main_generator_for_bit_93(bnd - 1) |};
    if(t == 3){return x;}
    if(t == 4){return !x;}
    bit y = {| ??(1)  | main_generator_for_bit_93(bnd - 1) |};
    if(t == 5){return x&&y;}
    if(t == 6){return x||y;}
}
int NDCNT=0;
int getND_private(int i);
int getND(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
int nd(){
    //Every time this function is called
    //it produces a new non-deterministic value.
    return getND_private(NDCNT++);
}
