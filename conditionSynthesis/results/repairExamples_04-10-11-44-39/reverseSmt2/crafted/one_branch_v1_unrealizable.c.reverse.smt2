(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int ))
(declare-rel main@entry.split ())
(declare-rel main@entry!_BAD ())
(declare-var main@%_0_0 Int )
(declare-var @nd_0 Int )
(declare-var main@%_1_0 Int )
(declare-var main@%_2_0 Int )
(declare-var @find_condition_0 Int )
(declare-var main@%_3_0 Bool )
(declare-var main@%phitmp.i_0 Bool )
(declare-var main@%spec.select.i_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@entry.split_0 Bool )
(rule (=> (main@entry @nd_0 @find_condition_0) main@entry!_BAD))
(rule (=> (and main@entry.split
         true
         true
         (= main@%_0_0 @nd_0)
         (= main@%_2_0 @find_condition_0)
         (= main@%phitmp.i_0 (> main@%_1_0 0))
         (= main@%spec.select.i_0 (and main@%_3_0 main@%phitmp.i_0))
         (not main@%spec.select.i_0)
         (=> main@entry.split_0 (and main@entry.split_0 main@entry_0))
         main@entry.split_0)
    (main@entry @nd_0 @find_condition_0)))
(rule main@entry.split)
(query main@entry!_BAD)

